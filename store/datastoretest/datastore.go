// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-census-alpha-ftb-dataset-api/models"
	"github.com/ONSdigital/dp-census-alpha-ftb-dataset-api/store"
	"github.com/globalsign/mgo/bson"
	"sync"
)

var (
	lockStorerMockCheckDatasetExists           sync.RWMutex
	lockStorerMockCheckEditionExists           sync.RWMutex
	lockStorerMockGetDataset                   sync.RWMutex
	lockStorerMockGetDatasets                  sync.RWMutex
	lockStorerMockGetDimensionOptions          sync.RWMutex
	lockStorerMockGetDimensions                sync.RWMutex
	lockStorerMockGetDimensionsFromInstance    sync.RWMutex
	lockStorerMockGetEdition                   sync.RWMutex
	lockStorerMockGetEditions                  sync.RWMutex
	lockStorerMockGetInstance                  sync.RWMutex
	lockStorerMockGetInstances                 sync.RWMutex
	lockStorerMockGetNextVersion               sync.RWMutex
	lockStorerMockGetUniqueDimensionAndOptions sync.RWMutex
	lockStorerMockGetVersion                   sync.RWMutex
	lockStorerMockGetVersions                  sync.RWMutex
)

// Ensure, that StorerMock does implement store.Storer.
// If this is not the case, regenerate this file with moq.
var _ store.Storer = &StorerMock{}

// StorerMock is a mock implementation of store.Storer.
//
//     func TestSomethingThatUsesStorer(t *testing.T) {
//
//         // make and configure a mocked store.Storer
//         mockedStorer := &StorerMock{
//             CheckDatasetExistsFunc: func(ID string, state string) error {
// 	               panic("mock out the CheckDatasetExists method")
//             },
//             CheckEditionExistsFunc: func(ID string, editionID string, state string) error {
// 	               panic("mock out the CheckEditionExists method")
//             },
//             GetDatasetFunc: func(ID string) (*models.DatasetUpdate, error) {
// 	               panic("mock out the GetDataset method")
//             },
//             GetDatasetsFunc: func(ctx context.Context) ([]models.DatasetUpdate, error) {
// 	               panic("mock out the GetDatasets method")
//             },
//             GetDimensionOptionsFunc: func(version *models.Version, dimension string) (*models.DimensionOptionResults, error) {
// 	               panic("mock out the GetDimensionOptions method")
//             },
//             GetDimensionsFunc: func(datasetID string, versionID string) ([]bson.M, error) {
// 	               panic("mock out the GetDimensions method")
//             },
//             GetDimensionsFromInstanceFunc: func(ID string) (*models.DimensionNodeResults, error) {
// 	               panic("mock out the GetDimensionsFromInstance method")
//             },
//             GetEditionFunc: func(ID string, editionID string, state string) (*models.EditionUpdate, error) {
// 	               panic("mock out the GetEdition method")
//             },
//             GetEditionsFunc: func(ctx context.Context, ID string, state string) (*models.EditionUpdateResults, error) {
// 	               panic("mock out the GetEditions method")
//             },
//             GetInstanceFunc: func(ID string) (*models.Instance, error) {
// 	               panic("mock out the GetInstance method")
//             },
//             GetInstancesFunc: func(ctx context.Context, states []string, datasets []string) (*models.InstanceResults, error) {
// 	               panic("mock out the GetInstances method")
//             },
//             GetNextVersionFunc: func(datasetID string, editionID string) (int, error) {
// 	               panic("mock out the GetNextVersion method")
//             },
//             GetUniqueDimensionAndOptionsFunc: func(ID string, dimension string) (*models.DimensionValues, error) {
// 	               panic("mock out the GetUniqueDimensionAndOptions method")
//             },
//             GetVersionFunc: func(datasetID string, editionID string, version string, state string) (*models.Version, error) {
// 	               panic("mock out the GetVersion method")
//             },
//             GetVersionsFunc: func(ctx context.Context, datasetID string, editionID string, state string) (*models.VersionResults, error) {
// 	               panic("mock out the GetVersions method")
//             },
//         }
//
//         // use mockedStorer in code that requires store.Storer
//         // and then make assertions.
//
//     }
type StorerMock struct {
	// CheckDatasetExistsFunc mocks the CheckDatasetExists method.
	CheckDatasetExistsFunc func(ID string, state string) error

	// CheckEditionExistsFunc mocks the CheckEditionExists method.
	CheckEditionExistsFunc func(ID string, editionID string, state string) error

	// GetDatasetFunc mocks the GetDataset method.
	GetDatasetFunc func(ID string) (*models.DatasetUpdate, error)

	// GetDatasetsFunc mocks the GetDatasets method.
	GetDatasetsFunc func(ctx context.Context) ([]models.DatasetUpdate, error)

	// GetDimensionOptionsFunc mocks the GetDimensionOptions method.
	GetDimensionOptionsFunc func(version *models.Version, dimension string) (*models.DimensionOptionResults, error)

	// GetDimensionsFunc mocks the GetDimensions method.
	GetDimensionsFunc func(datasetID string, versionID string) ([]bson.M, error)

	// GetDimensionsFromInstanceFunc mocks the GetDimensionsFromInstance method.
	GetDimensionsFromInstanceFunc func(ID string) (*models.DimensionNodeResults, error)

	// GetEditionFunc mocks the GetEdition method.
	GetEditionFunc func(ID string, editionID string, state string) (*models.EditionUpdate, error)

	// GetEditionsFunc mocks the GetEditions method.
	GetEditionsFunc func(ctx context.Context, ID string, state string) (*models.EditionUpdateResults, error)

	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(ID string) (*models.Instance, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(ctx context.Context, states []string, datasets []string) (*models.InstanceResults, error)

	// GetNextVersionFunc mocks the GetNextVersion method.
	GetNextVersionFunc func(datasetID string, editionID string) (int, error)

	// GetUniqueDimensionAndOptionsFunc mocks the GetUniqueDimensionAndOptions method.
	GetUniqueDimensionAndOptionsFunc func(ID string, dimension string) (*models.DimensionValues, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(datasetID string, editionID string, version string, state string) (*models.Version, error)

	// GetVersionsFunc mocks the GetVersions method.
	GetVersionsFunc func(ctx context.Context, datasetID string, editionID string, state string) (*models.VersionResults, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckDatasetExists holds details about calls to the CheckDatasetExists method.
		CheckDatasetExists []struct {
			// ID is the ID argument value.
			ID string
			// State is the state argument value.
			State string
		}
		// CheckEditionExists holds details about calls to the CheckEditionExists method.
		CheckEditionExists []struct {
			// ID is the ID argument value.
			ID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// GetDataset holds details about calls to the GetDataset method.
		GetDataset []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetDatasets holds details about calls to the GetDatasets method.
		GetDatasets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetDimensionOptions holds details about calls to the GetDimensionOptions method.
		GetDimensionOptions []struct {
			// Version is the version argument value.
			Version *models.Version
			// Dimension is the dimension argument value.
			Dimension string
		}
		// GetDimensions holds details about calls to the GetDimensions method.
		GetDimensions []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// VersionID is the versionID argument value.
			VersionID string
		}
		// GetDimensionsFromInstance holds details about calls to the GetDimensionsFromInstance method.
		GetDimensionsFromInstance []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetEdition holds details about calls to the GetEdition method.
		GetEdition []struct {
			// ID is the ID argument value.
			ID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// GetEditions holds details about calls to the GetEditions method.
		GetEditions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the ID argument value.
			ID string
			// State is the state argument value.
			State string
		}
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// States is the states argument value.
			States []string
			// Datasets is the datasets argument value.
			Datasets []string
		}
		// GetNextVersion holds details about calls to the GetNextVersion method.
		GetNextVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// GetUniqueDimensionAndOptions holds details about calls to the GetUniqueDimensionAndOptions method.
		GetUniqueDimensionAndOptions []struct {
			// ID is the ID argument value.
			ID string
			// Dimension is the dimension argument value.
			Dimension string
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// Version is the version argument value.
			Version string
			// State is the state argument value.
			State string
		}
		// GetVersions holds details about calls to the GetVersions method.
		GetVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
	}
}

// CheckDatasetExists calls CheckDatasetExistsFunc.
func (mock *StorerMock) CheckDatasetExists(ID string, state string) error {
	if mock.CheckDatasetExistsFunc == nil {
		panic("StorerMock.CheckDatasetExistsFunc: method is nil but Storer.CheckDatasetExists was just called")
	}
	callInfo := struct {
		ID    string
		State string
	}{
		ID:    ID,
		State: state,
	}
	lockStorerMockCheckDatasetExists.Lock()
	mock.calls.CheckDatasetExists = append(mock.calls.CheckDatasetExists, callInfo)
	lockStorerMockCheckDatasetExists.Unlock()
	return mock.CheckDatasetExistsFunc(ID, state)
}

// CheckDatasetExistsCalls gets all the calls that were made to CheckDatasetExists.
// Check the length with:
//     len(mockedStorer.CheckDatasetExistsCalls())
func (mock *StorerMock) CheckDatasetExistsCalls() []struct {
	ID    string
	State string
} {
	var calls []struct {
		ID    string
		State string
	}
	lockStorerMockCheckDatasetExists.RLock()
	calls = mock.calls.CheckDatasetExists
	lockStorerMockCheckDatasetExists.RUnlock()
	return calls
}

// CheckEditionExists calls CheckEditionExistsFunc.
func (mock *StorerMock) CheckEditionExists(ID string, editionID string, state string) error {
	if mock.CheckEditionExistsFunc == nil {
		panic("StorerMock.CheckEditionExistsFunc: method is nil but Storer.CheckEditionExists was just called")
	}
	callInfo := struct {
		ID        string
		EditionID string
		State     string
	}{
		ID:        ID,
		EditionID: editionID,
		State:     state,
	}
	lockStorerMockCheckEditionExists.Lock()
	mock.calls.CheckEditionExists = append(mock.calls.CheckEditionExists, callInfo)
	lockStorerMockCheckEditionExists.Unlock()
	return mock.CheckEditionExistsFunc(ID, editionID, state)
}

// CheckEditionExistsCalls gets all the calls that were made to CheckEditionExists.
// Check the length with:
//     len(mockedStorer.CheckEditionExistsCalls())
func (mock *StorerMock) CheckEditionExistsCalls() []struct {
	ID        string
	EditionID string
	State     string
} {
	var calls []struct {
		ID        string
		EditionID string
		State     string
	}
	lockStorerMockCheckEditionExists.RLock()
	calls = mock.calls.CheckEditionExists
	lockStorerMockCheckEditionExists.RUnlock()
	return calls
}

// GetDataset calls GetDatasetFunc.
func (mock *StorerMock) GetDataset(ID string) (*models.DatasetUpdate, error) {
	if mock.GetDatasetFunc == nil {
		panic("StorerMock.GetDatasetFunc: method is nil but Storer.GetDataset was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockStorerMockGetDataset.Lock()
	mock.calls.GetDataset = append(mock.calls.GetDataset, callInfo)
	lockStorerMockGetDataset.Unlock()
	return mock.GetDatasetFunc(ID)
}

// GetDatasetCalls gets all the calls that were made to GetDataset.
// Check the length with:
//     len(mockedStorer.GetDatasetCalls())
func (mock *StorerMock) GetDatasetCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockStorerMockGetDataset.RLock()
	calls = mock.calls.GetDataset
	lockStorerMockGetDataset.RUnlock()
	return calls
}

// GetDatasets calls GetDatasetsFunc.
func (mock *StorerMock) GetDatasets(ctx context.Context) ([]models.DatasetUpdate, error) {
	if mock.GetDatasetsFunc == nil {
		panic("StorerMock.GetDatasetsFunc: method is nil but Storer.GetDatasets was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStorerMockGetDatasets.Lock()
	mock.calls.GetDatasets = append(mock.calls.GetDatasets, callInfo)
	lockStorerMockGetDatasets.Unlock()
	return mock.GetDatasetsFunc(ctx)
}

// GetDatasetsCalls gets all the calls that were made to GetDatasets.
// Check the length with:
//     len(mockedStorer.GetDatasetsCalls())
func (mock *StorerMock) GetDatasetsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStorerMockGetDatasets.RLock()
	calls = mock.calls.GetDatasets
	lockStorerMockGetDatasets.RUnlock()
	return calls
}

// GetDimensionOptions calls GetDimensionOptionsFunc.
func (mock *StorerMock) GetDimensionOptions(version *models.Version, dimension string) (*models.DimensionOptionResults, error) {
	if mock.GetDimensionOptionsFunc == nil {
		panic("StorerMock.GetDimensionOptionsFunc: method is nil but Storer.GetDimensionOptions was just called")
	}
	callInfo := struct {
		Version   *models.Version
		Dimension string
	}{
		Version:   version,
		Dimension: dimension,
	}
	lockStorerMockGetDimensionOptions.Lock()
	mock.calls.GetDimensionOptions = append(mock.calls.GetDimensionOptions, callInfo)
	lockStorerMockGetDimensionOptions.Unlock()
	return mock.GetDimensionOptionsFunc(version, dimension)
}

// GetDimensionOptionsCalls gets all the calls that were made to GetDimensionOptions.
// Check the length with:
//     len(mockedStorer.GetDimensionOptionsCalls())
func (mock *StorerMock) GetDimensionOptionsCalls() []struct {
	Version   *models.Version
	Dimension string
} {
	var calls []struct {
		Version   *models.Version
		Dimension string
	}
	lockStorerMockGetDimensionOptions.RLock()
	calls = mock.calls.GetDimensionOptions
	lockStorerMockGetDimensionOptions.RUnlock()
	return calls
}

// GetDimensions calls GetDimensionsFunc.
func (mock *StorerMock) GetDimensions(datasetID string, versionID string) ([]bson.M, error) {
	if mock.GetDimensionsFunc == nil {
		panic("StorerMock.GetDimensionsFunc: method is nil but Storer.GetDimensions was just called")
	}
	callInfo := struct {
		DatasetID string
		VersionID string
	}{
		DatasetID: datasetID,
		VersionID: versionID,
	}
	lockStorerMockGetDimensions.Lock()
	mock.calls.GetDimensions = append(mock.calls.GetDimensions, callInfo)
	lockStorerMockGetDimensions.Unlock()
	return mock.GetDimensionsFunc(datasetID, versionID)
}

// GetDimensionsCalls gets all the calls that were made to GetDimensions.
// Check the length with:
//     len(mockedStorer.GetDimensionsCalls())
func (mock *StorerMock) GetDimensionsCalls() []struct {
	DatasetID string
	VersionID string
} {
	var calls []struct {
		DatasetID string
		VersionID string
	}
	lockStorerMockGetDimensions.RLock()
	calls = mock.calls.GetDimensions
	lockStorerMockGetDimensions.RUnlock()
	return calls
}

// GetDimensionsFromInstance calls GetDimensionsFromInstanceFunc.
func (mock *StorerMock) GetDimensionsFromInstance(ID string) (*models.DimensionNodeResults, error) {
	if mock.GetDimensionsFromInstanceFunc == nil {
		panic("StorerMock.GetDimensionsFromInstanceFunc: method is nil but Storer.GetDimensionsFromInstance was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockStorerMockGetDimensionsFromInstance.Lock()
	mock.calls.GetDimensionsFromInstance = append(mock.calls.GetDimensionsFromInstance, callInfo)
	lockStorerMockGetDimensionsFromInstance.Unlock()
	return mock.GetDimensionsFromInstanceFunc(ID)
}

// GetDimensionsFromInstanceCalls gets all the calls that were made to GetDimensionsFromInstance.
// Check the length with:
//     len(mockedStorer.GetDimensionsFromInstanceCalls())
func (mock *StorerMock) GetDimensionsFromInstanceCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockStorerMockGetDimensionsFromInstance.RLock()
	calls = mock.calls.GetDimensionsFromInstance
	lockStorerMockGetDimensionsFromInstance.RUnlock()
	return calls
}

// GetEdition calls GetEditionFunc.
func (mock *StorerMock) GetEdition(ID string, editionID string, state string) (*models.EditionUpdate, error) {
	if mock.GetEditionFunc == nil {
		panic("StorerMock.GetEditionFunc: method is nil but Storer.GetEdition was just called")
	}
	callInfo := struct {
		ID        string
		EditionID string
		State     string
	}{
		ID:        ID,
		EditionID: editionID,
		State:     state,
	}
	lockStorerMockGetEdition.Lock()
	mock.calls.GetEdition = append(mock.calls.GetEdition, callInfo)
	lockStorerMockGetEdition.Unlock()
	return mock.GetEditionFunc(ID, editionID, state)
}

// GetEditionCalls gets all the calls that were made to GetEdition.
// Check the length with:
//     len(mockedStorer.GetEditionCalls())
func (mock *StorerMock) GetEditionCalls() []struct {
	ID        string
	EditionID string
	State     string
} {
	var calls []struct {
		ID        string
		EditionID string
		State     string
	}
	lockStorerMockGetEdition.RLock()
	calls = mock.calls.GetEdition
	lockStorerMockGetEdition.RUnlock()
	return calls
}

// GetEditions calls GetEditionsFunc.
func (mock *StorerMock) GetEditions(ctx context.Context, ID string, state string) (*models.EditionUpdateResults, error) {
	if mock.GetEditionsFunc == nil {
		panic("StorerMock.GetEditionsFunc: method is nil but Storer.GetEditions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		State string
	}{
		Ctx:   ctx,
		ID:    ID,
		State: state,
	}
	lockStorerMockGetEditions.Lock()
	mock.calls.GetEditions = append(mock.calls.GetEditions, callInfo)
	lockStorerMockGetEditions.Unlock()
	return mock.GetEditionsFunc(ctx, ID, state)
}

// GetEditionsCalls gets all the calls that were made to GetEditions.
// Check the length with:
//     len(mockedStorer.GetEditionsCalls())
func (mock *StorerMock) GetEditionsCalls() []struct {
	Ctx   context.Context
	ID    string
	State string
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		State string
	}
	lockStorerMockGetEditions.RLock()
	calls = mock.calls.GetEditions
	lockStorerMockGetEditions.RUnlock()
	return calls
}

// GetInstance calls GetInstanceFunc.
func (mock *StorerMock) GetInstance(ID string) (*models.Instance, error) {
	if mock.GetInstanceFunc == nil {
		panic("StorerMock.GetInstanceFunc: method is nil but Storer.GetInstance was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockStorerMockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	lockStorerMockGetInstance.Unlock()
	return mock.GetInstanceFunc(ID)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedStorer.GetInstanceCalls())
func (mock *StorerMock) GetInstanceCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockStorerMockGetInstance.RLock()
	calls = mock.calls.GetInstance
	lockStorerMockGetInstance.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *StorerMock) GetInstances(ctx context.Context, states []string, datasets []string) (*models.InstanceResults, error) {
	if mock.GetInstancesFunc == nil {
		panic("StorerMock.GetInstancesFunc: method is nil but Storer.GetInstances was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		States   []string
		Datasets []string
	}{
		Ctx:      ctx,
		States:   states,
		Datasets: datasets,
	}
	lockStorerMockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	lockStorerMockGetInstances.Unlock()
	return mock.GetInstancesFunc(ctx, states, datasets)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//     len(mockedStorer.GetInstancesCalls())
func (mock *StorerMock) GetInstancesCalls() []struct {
	Ctx      context.Context
	States   []string
	Datasets []string
} {
	var calls []struct {
		Ctx      context.Context
		States   []string
		Datasets []string
	}
	lockStorerMockGetInstances.RLock()
	calls = mock.calls.GetInstances
	lockStorerMockGetInstances.RUnlock()
	return calls
}

// GetNextVersion calls GetNextVersionFunc.
func (mock *StorerMock) GetNextVersion(datasetID string, editionID string) (int, error) {
	if mock.GetNextVersionFunc == nil {
		panic("StorerMock.GetNextVersionFunc: method is nil but Storer.GetNextVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
	}
	lockStorerMockGetNextVersion.Lock()
	mock.calls.GetNextVersion = append(mock.calls.GetNextVersion, callInfo)
	lockStorerMockGetNextVersion.Unlock()
	return mock.GetNextVersionFunc(datasetID, editionID)
}

// GetNextVersionCalls gets all the calls that were made to GetNextVersion.
// Check the length with:
//     len(mockedStorer.GetNextVersionCalls())
func (mock *StorerMock) GetNextVersionCalls() []struct {
	DatasetID string
	EditionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
	}
	lockStorerMockGetNextVersion.RLock()
	calls = mock.calls.GetNextVersion
	lockStorerMockGetNextVersion.RUnlock()
	return calls
}

// GetUniqueDimensionAndOptions calls GetUniqueDimensionAndOptionsFunc.
func (mock *StorerMock) GetUniqueDimensionAndOptions(ID string, dimension string) (*models.DimensionValues, error) {
	if mock.GetUniqueDimensionAndOptionsFunc == nil {
		panic("StorerMock.GetUniqueDimensionAndOptionsFunc: method is nil but Storer.GetUniqueDimensionAndOptions was just called")
	}
	callInfo := struct {
		ID        string
		Dimension string
	}{
		ID:        ID,
		Dimension: dimension,
	}
	lockStorerMockGetUniqueDimensionAndOptions.Lock()
	mock.calls.GetUniqueDimensionAndOptions = append(mock.calls.GetUniqueDimensionAndOptions, callInfo)
	lockStorerMockGetUniqueDimensionAndOptions.Unlock()
	return mock.GetUniqueDimensionAndOptionsFunc(ID, dimension)
}

// GetUniqueDimensionAndOptionsCalls gets all the calls that were made to GetUniqueDimensionAndOptions.
// Check the length with:
//     len(mockedStorer.GetUniqueDimensionAndOptionsCalls())
func (mock *StorerMock) GetUniqueDimensionAndOptionsCalls() []struct {
	ID        string
	Dimension string
} {
	var calls []struct {
		ID        string
		Dimension string
	}
	lockStorerMockGetUniqueDimensionAndOptions.RLock()
	calls = mock.calls.GetUniqueDimensionAndOptions
	lockStorerMockGetUniqueDimensionAndOptions.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *StorerMock) GetVersion(datasetID string, editionID string, version string, state string) (*models.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("StorerMock.GetVersionFunc: method is nil but Storer.GetVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
		Version   string
		State     string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
		Version:   version,
		State:     state,
	}
	lockStorerMockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	lockStorerMockGetVersion.Unlock()
	return mock.GetVersionFunc(datasetID, editionID, version, state)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedStorer.GetVersionCalls())
func (mock *StorerMock) GetVersionCalls() []struct {
	DatasetID string
	EditionID string
	Version   string
	State     string
} {
	var calls []struct {
		DatasetID string
		EditionID string
		Version   string
		State     string
	}
	lockStorerMockGetVersion.RLock()
	calls = mock.calls.GetVersion
	lockStorerMockGetVersion.RUnlock()
	return calls
}

// GetVersions calls GetVersionsFunc.
func (mock *StorerMock) GetVersions(ctx context.Context, datasetID string, editionID string, state string) (*models.VersionResults, error) {
	if mock.GetVersionsFunc == nil {
		panic("StorerMock.GetVersionsFunc: method is nil but Storer.GetVersions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
		State     string
	}{
		Ctx:       ctx,
		DatasetID: datasetID,
		EditionID: editionID,
		State:     state,
	}
	lockStorerMockGetVersions.Lock()
	mock.calls.GetVersions = append(mock.calls.GetVersions, callInfo)
	lockStorerMockGetVersions.Unlock()
	return mock.GetVersionsFunc(ctx, datasetID, editionID, state)
}

// GetVersionsCalls gets all the calls that were made to GetVersions.
// Check the length with:
//     len(mockedStorer.GetVersionsCalls())
func (mock *StorerMock) GetVersionsCalls() []struct {
	Ctx       context.Context
	DatasetID string
	EditionID string
	State     string
} {
	var calls []struct {
		Ctx       context.Context
		DatasetID string
		EditionID string
		State     string
	}
	lockStorerMockGetVersions.RLock()
	calls = mock.calls.GetVersions
	lockStorerMockGetVersions.RUnlock()
	return calls
}
